    public int countSyntax() {
        int[] factorsOf300 = {2, 2, 3, 5, 5};
        int uniqueFactors = (int) Arrays.stream(factorsOf300).distinct().count();
        System.out.println("There are " + uniqueFactors + " unique factors of 300.");
        return 0;
    }

    public int countConditional() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        int oddNumbers = (int) Arrays.stream(numbers).filter(n -> n % 2 == 1).count();
        System.out.println("There are " + oddNumbers + " odd numbers in the list.");
        return 0;
    }

    public int nestedCount() {
        List<Customer> customers = getCustomerList();
        var orderCounts = customers.stream().map(c ->
                Pair.with(c.getCustomerId(), c.getOrders().size())).collect(Collectors.toList());
        for (var customer : orderCounts)
            System.out.println("ID: " + customer.getValue0() + ", count: " + customer.getValue1());
        return 0;
    }

    public int groupedCount() {
        List<Product> products = getProductList();
        var categoryCounts = products.stream().collect(Collectors.groupingBy(
                        p -> p.getCategory())).entrySet().stream().map(e -> Pair.with(e.getKey(), e.getValue().size()))
                .collect(Collectors.toList());
        for (var c : categoryCounts)
            System.out.println("Category: " + c.getValue0() + ": Product count: " + c.getValue1());
        return 0;
    }

    public int sumSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        int numSum = Arrays.stream(numbers).sum();
        System.out.println("The sum of the numbers is " + numSum);
        return 0;
    }

    public int sumProjection() {
        String[] words = {"cherry", "apple", "blueberry"};
        int totalChars = Arrays.stream(words).mapToInt(w -> w.length()).sum();
        System.out.println("There are a total of " + totalChars + " characters in these words.");
        return 0;
    }

    public int sumGrouped() {
        List<Product> products = getProductList();
        var categories = products.stream().collect(Collectors.groupingBy(
                        p -> p.getCategory())).entrySet().stream().map(e -> Pair.with(e.getKey(),
                        e.getValue().stream().mapToInt(p -> p.getUnitsInStock()).sum()))
                .collect(Collectors.toList());
        for (var pair : categories)
            System.out.println("Category: " + pair.getValue0() + ", Units in stock: " + pair.getValue1());
        return 0;
    }

    public int minSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        int minNum = Arrays.stream(numbers).min().getAsInt();
        System.out.println("The minimum number is " + minNum);
        return 0;
    }

    public int minProjection() {
        String[] words = {"cherry", "apple", "blueberry"};
        int shortestWord = Arrays.stream(words).mapToInt(w -> w.length()).min().getAsInt();
        System.out.println("The shortest word is " + shortestWord + " characters long.");
        return 0;
    }

    public int minGrouped() {
        List<Product> products = getProductList();
        var categories = products.stream().collect(Collectors.groupingBy(
                        p -> p.getCategory())).entrySet().stream().map(e -> Pair.with(e.getKey(),
                        e.getValue().stream().mapToDouble(p -> p.getUnitPrice()).min().getAsDouble()))
                .collect(Collectors.toList());
        for (var c : categories)
            System.out.println("Category: " + c.getValue0() + ", Lowest price: " + c.getValue1());
        return 0;
    }

    public int minEachGroup() {
        List<Product> products = getProductList();
        var categories = products.stream().collect(Collectors.groupingBy(
                p -> p.getCategory())).entrySet().stream().map(e -> Pair.with(e.getKey(),
                e.getValue().stream().filter(p -> p.getUnitPrice() == e.getValue()
                                .stream().mapToDouble(p1 -> p1.getUnitPrice()).min().getAsDouble())
                        .toList())).collect(Collectors.toList());
        for (var c : categories) {
            System.out.println("Category: " + c.getValue0());
            for (var p : c.getValue1())
                System.out.println("\tProduct: " + p);
        }
        return 0;
    }

    public int MaxSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        int maxNum = Arrays.stream(numbers).max().getAsInt();
        System.out.println("The maximum number is "+maxNum);
        return 0;
    }

    public int maxProjection() {
        String[] words = {"cherry", "apple", "blueberry"};
        int longestLength = Arrays.stream(words).mapToInt(w->w.length()).max().getAsInt();
        System.out.println("The longest word is "+longestLength+" characters long.");
        return 0;
    }

    public int maxGrouped() {
        List<Product> products = getProductList();
        var categories = products.stream().collect(Collectors.groupingBy(
                        p -> p.getCategory())).entrySet().stream().map(e -> Pair.with(e.getKey(),
                        e.getValue().stream().mapToDouble(p -> p.getUnitPrice()).max().getAsDouble()))
                .collect(Collectors.toList());
        for (var c : categories)
        System.out.println("Category: "+c.getValue0()+" Most expensive product: "+c.getValue1());
        return 0;
    }

    public int maxEachGroup() {
        List<Product> products = getProductList();
        var categories = products.stream().collect(Collectors.groupingBy(
                p -> p.getCategory())).entrySet().stream().map(e -> Pair.with(e.getKey(),
                e.getValue().stream().filter(p -> p.getUnitPrice() == e.getValue()
                                .stream().mapToDouble(p1 -> p1.getUnitPrice()).max().getAsDouble())
                        .toList())).collect(Collectors.toList());
        for(var c : categories) {
            System.out.println("Category: "+c.getValue0());
            for(var p : c.getValue1())
                System.out.println("\t"+p);
        }
        return 0;
    }

    public int averageSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        double averageNum = Arrays.stream(numbers).average().getAsDouble();
        System.out.println("The average number is "+averageNum+".");
        return 0;
    }

    public int averageProjection() {
        String[] words = {"cherry", "apple", "blueberry"};
        double averageLength = Arrays.stream(words).mapToInt(w -> w.length()).average().getAsDouble();
        System.out.println("The average word length is "+averageLength+" characters.");
        return 0;
    }

    public int averageGrouped() {
        List<Product> products = getProductList();
        var categories = products.stream().collect(Collectors.groupingBy(
                        p -> p.getCategory())).entrySet().stream().map(e -> Pair.with(e.getKey(),
                        e.getValue().stream().mapToDouble(p -> p.getUnitPrice()).average().getAsDouble()))
                .collect(Collectors.toList());
        for(var c : categories)
            System.out.println("Category: "+c.getValue0()+" Average price: "+c.getValue1());
        return 0;
    }

    public int aggregateSyntax() {
        double[] doubles = {1.7, 2.3, 1.9, 4.1, 2.9};
        double product = Arrays.stream(doubles).reduce((runningProduct, nextFactor)
                ->runningProduct * nextFactor).getAsDouble();
        System.out.println("Total product of all numbers: "+product);
        return 0;
    }

    public int seededAggregate() {
        int startBalance = 100;
        int[] attemptedWithdrawals = {20, 10, 40, 50, 10, 70, 30};
        int endBalance = Arrays.stream(attemptedWithdrawals).reduce(startBalance,(balance, nextWithdrawal) ->
        ((nextWithdrawal <= balance) ? (balance - nextWithdrawal) : balance));
        System.out.println("Ending balance: "+endBalance);
        return 0;
    }

    public int convertToArray() {
        double[] doubles = {1.7, 2.3, 1.9, 4.1, 2.9};
        var doublesArray = Arrays.stream(doubles).boxed().
                sorted(Comparator.comparing(d -> d)).toArray();
        System.out.println("Every other double from highest to lowest:");
        for (int d = 0; d < doublesArray.length; d += 2)
            System.out.println(doublesArray[d]);
        return 0;
    }

    public int convertToList() {
        String[] words = {"cherry", "apple", "blueberry"};
        var sortedWords = Arrays.stream(words).sorted().collect(Collectors.toList());
        System.out.println("The sorted word list:");
        for (var w : sortedWords)
            System.out.println(w);
        return 0;
    }

    public int convertToDictionary() {
        var scoreRecords = new Pair[]{Pair.with("Alice", 50), Pair.with("Bob", 40), Pair.with("Cathy", 45)};
        var scoreRecordsDict = Arrays.stream(scoreRecords).collect(
                Collectors.toMap(sr -> sr.getValue0(), sr -> sr.getValue1()));
        System.out.println("Bob's score: " + scoreRecordsDict.get("Bob"));
        return 0;
    }

    public int convertSelectedItems() {
        Object[] numbers = { null, 1.0, "two", 3, "four", 5, "six", 7.0 };

        var doubles = Arrays.stream(numbers).filter(o->o instanceof Double).toArray();

        System.out.println("Numbers stored as doubles:");
        for (var d : doubles)
            System.out.println(d);
        return 0;
    }

    public int firstElement() {
        List<Product> products = getProductList();
        Product product12 = products.stream().filter(p -> p.getProductId() == 12).findFirst().get();
        System.out.println(product12);
        return 0;
    }

    public int firstMatchingElement() {
        String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        String startsWithO = Arrays.stream(strings).filter(s -> s.charAt(0) == 'o').findFirst().get();
        System.out.println("A string starting with 'o': " + startsWithO);
        return 0;
    }

    public int maybeFirstElement() {
        int[] numbers = {};
        int firstNumOrDefault = Arrays.stream(numbers).findFirst().orElse(0);
        System.out.println(firstNumOrDefault);
        return 0;
    }

    public int maybeFirstMatchingElement() {
        List<Product> products = getProductList();
        Product product789 = products.stream().filter(p -> p.getProductId() == 789).findFirst().orElse(null);
        System.out.println("Product 789 exists: " + (product789 != null));
        return 0;
    }

    public int elementAtPosition() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        int fourthLowNum = Arrays.stream(numbers).boxed().filter(n -> n > 5).skip(1).findFirst().get();
        System.out.println("Second number > 5: " + fourthLowNum);
        return 0;
    }

    public int rangeOfIntegers() {
        var numbers = IntStream.range(100, 100 + 50).boxed().
                map(n -> Pair.with(n, n % 2 == 1 ? "odd" : "even")).collect(Collectors.toList());
        for (var n : numbers)
            System.out.println("The number " + n.getValue0() + " is " + n.getValue1() + ".");
        return 0;
    }

    public int repeatNumber() {
        var numbers = new ArrayList<>(Collections.nCopies(10, 7));
        for(var n : numbers)
            System.out.println(n);
        return 0;
    }

    public int groupingSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var numberGroups = Arrays.stream(numbers).boxed().collect(
                Collectors.groupingBy(n -> n % 5));
        for (var g : numberGroups.entrySet()) {
            System.out.println("Numbers with a remainder of " + g.getKey() + " when divided by 5:");
            for (var n : g.getValue())
                System.out.println(n);
        }
        return 0;
    }

    public int groupByProperty() {
        String[] words = {"blueberry", "chimpanzee", "abacus", "banana", "apple", "cheese"};
        var wordGroups = Arrays.stream(words).collect(
                Collectors.groupingBy(n -> n.charAt(0)));
        for (var g : wordGroups.entrySet()) {
            System.out.println("Words that start with the letter '" + g.getKey() + "':");
            for (var w : g.getValue())
                System.out.println(w);
        }
        return 0;
    }

    public int groupByCategory() {
        List<Product> products = getProductList();
        var orderGroups = products.stream().collect(
                Collectors.groupingBy(p -> p.getCategory()));
        for (var orderGroup : orderGroups.entrySet()) {
            System.out.println("Products in " + orderGroup.getKey() + " category:");
            for (var product : orderGroup.getValue())
                System.out.println("\t" + product + "}");
        }
        return 0;
    }

    public int nestedGroupBy() {
        List<Customer> customers = getCustomerList();
        var customerOrderGroups = customers.stream().map(
                c -> Pair.with(c.getCompanyName(),
                        c.getOrders().stream().collect(Collectors.groupingBy(
                                o -> o.getOrderDate().getYear(),
                                Collectors.groupingBy(
                                        o -> o.getOrderDate().getMonth().getValue()
                                )
                        ))
                )
        ).collect(Collectors.toList());
        for (var ordersByCustomer : customerOrderGroups) {
            System.out.println("Customer Name: " + ordersByCustomer.getValue0());
            for (var ordersByYear : ordersByCustomer.getValue1().entrySet()) {
                System.out.println("\tYear: " + ordersByYear.getKey());
                for (var ordersByMonth : ordersByYear.getValue().entrySet()) {
                    System.out.println("\t\tMonth: " + ordersByMonth.getKey());
                    for (var order : ordersByMonth.getValue())
                        System.out.println("\t\t\tOrder: " + order);
                }
            }
        }
        return 0;
    }

    public int groupByCustomComparer() {
        String[] anagrams = {"from   ", " salt", " earn ", "  last   ", " near ", " form  "};
        var orderGroups = Arrays.stream(anagrams).collect(
                Collectors.groupingBy(p -> new AnagramEqualityComparer().getCanonicalString(p.trim())));
        for (var set : orderGroups.entrySet()) {
            for (var word : set.getValue())
                System.out.println(word);
            System.out.println("...");
        }
        return 0;
    }

    public int nestedGroupByCustom() {
        String[] anagrams = {"from   ", " salt", " earn ", "  last   ", " near ", " form  "};
        var orderGroups = Arrays.stream(anagrams).collect(Collectors.groupingBy(
                w -> new AnagramEqualityComparer().getCanonicalString(w.trim()),
                Collectors.mapping(w -> w.toUpperCase(), Collectors.toList())));
        for (var set : orderGroups.entrySet()) {
            System.out.println(set.getKey());
            for (var word : set.getValue())
                System.out.println("\t" + word);
        }
        return 0;
    }

    public int crossJoinQuery() {
        String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"};
        List<Product> products = getProductList();
        var q = Arrays.stream(categories).flatMap(
                c -> products.stream().filter(p -> p.getCategory().equals(c)).map(
                        p -> Pair.with(c, p.productName)
                )).collect(Collectors.toList());
        for (var v : q)
            System.out.println(v.getValue0() + ": " + v.getValue1());
        return 0;
    }

    public int groupJoinQuery() {
        String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"};
        List<Product> products = getProductList();
        var q = Arrays.stream(categories).map(
                c -> Pair.with(c, products.stream().filter(p -> p.getCategory().equals(c))
                        .collect(Collectors.toList()))
        ).collect(Collectors.toMap(t -> t.getValue0(), t -> t.getValue1()));
        for (var v : q.entrySet()) {
            System.out.println(v.getKey() + ":");
            for (var p : v.getValue())
                System.out.println("   " + p.getProductName());
        }
        return 0;
    }

    public int crossGroupJoin() {
        String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"};
        List<Product> products = getProductList();
        var q = Arrays.stream(categories).map(
                c -> Pair.with(c, products.stream().filter(p -> p.getCategory().equals(c))
                        .collect(Collectors.toList()))).flatMap(t -> t.getValue1().stream()
                .map(p -> Pair.with(t.getValue0(), p.getProductName()))).collect(Collectors.toList());
        for (var v : q)
            System.out.println(v.getValue1() + ": " + v.getValue0());
        return 0;
    }

    public int leftOuterJoin() {
        String[] categories = {"Beverages", "Condiments", "Vegetables", "Dairy Products", "Seafood"};
        List<Product> products = getProductList();
        var q = Arrays.stream(categories).map(
                c -> Pair.with(c, products.stream().filter(p -> p.getCategory().equals(c))
                        .collect(Collectors.toList()))).flatMap(t -> defaultIfEmpty(t.getValue1(), null)
                .stream().map(p -> Pair.with(t.getValue0(),
                        p == null ? "(No products)" : p.getProductName()))).collect(Collectors.toList());
        for (var v : q)
            System.out.println(v.getValue1() + ": " + v.getValue0());
        return 0;
    }

    public int orderbySyntax() {
        String[] words = {"cherry", "apple", "blueberry"};
        var sortedWords = Arrays.stream(words).sorted(Comparator.comparing(w -> w)).toArray();
        System.out.println("The sorted list of words:");
        for (var w : sortedWords)
            System.out.println(w);
        return 0;
    }

    public int orderbyProperty() {
        String[] words = {"cherry", "apple", "blueberry"};
        var sortedWords = Arrays.stream(words).sorted(Comparator.comparing(w -> w.length())).toArray();
        System.out.println("The sorted list of words (by length):");
        for (var w : sortedWords)
            System.out.println(w);
        return 0;
    }

    public int orderByProducts() {
        List<Product> products = getProductList();
        var sortedProducts = products.stream().sorted(Comparator.comparing(p -> p.getProductName()))
                .collect(Collectors.toList());
        for (var product : sortedProducts)
            System.out.println(product);
        return 0;
    }

    public static class CaseInsensitiveComparer implements Comparator<String> {
        @Override
        public int compare(String x, String y) {
            return x.toUpperCase().compareTo(y.toUpperCase());
        }
    }

    public int orderByWithCustomComparer() {
        String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"};
        var sortedWords = Arrays.stream(words).sorted(new CaseInsensitiveComparer()).toArray();
        for (var word : sortedWords)
            System.out.println(word);
        return 0;
    }

    public int orderByDescendingSyntax() {
        double[] doubles = {1.7, 2.3, 1.9, 4.1, 2.9};
        var sortedDoubles = Arrays.stream(doubles).boxed().sorted(Comparator.reverseOrder()).toArray();
        System.out.println("The doubles from highest to lowest:");
        for (var d : sortedDoubles)
            System.out.println(d);
        return 0;
    }

    public int orderProductsDescending() {
        List<Product> products = getProductList();
        var sortedProducts = products.stream().sorted(
                Comparator.comparing((Product p) -> p.getUnitsInStock(), Comparator.reverseOrder())).toList();
        for (var product : sortedProducts)
            System.out.println(product);
        return 0;
    }

    public int descendingCustomComparer() {
        String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"};
        var sortedWords = Arrays.stream(words).sorted(new CaseInsensitiveComparer().reversed()).toArray();
        for (var word : sortedWords)
            System.out.println(word);
        return 0;
    }

    public int thenBySyntax() {
        String[] digits = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        var sortedDigits = Arrays.stream(digits).sorted(Comparator.comparing((String d) -> d.length())
                .thenComparing(d -> d)).toArray();
        System.out.println("Sorted digits:");
        for (var d : sortedDigits)
            System.out.println(d);
        return 0;
    }

    public int thenByCustom() {
        String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"};
        var sortedWords = Arrays.stream(words).sorted(Comparator.comparing((String d) -> d.length())
                .thenComparing(new CaseInsensitiveComparer())).toArray();
        for (var word : sortedWords)
            System.out.println(word);
        return 0;
    }

    public int thenByDifferentOrdering() {
        List<Product> products = getProductList();
        var sortedProducts = products.stream().sorted(Comparator.comparing((Product p) -> p.getCategory())
                .thenComparing(p -> p.getUnitPrice(), Comparator.reverseOrder())).collect(Collectors.toList());
        for (var product : sortedProducts)
            System.out.println(product);
        return 0;
    }

    public int customThenByDescending() {
        String[] words = {"aPPLE", "AbAcUs", "bRaNcH", "BlUeBeRrY", "ClOvEr", "cHeRry"};
        var sortedWords = Arrays.stream(words).sorted(Comparator.comparing((String a) -> a.length()).
                thenComparing(new CaseInsensitiveComparer().reversed())).toArray();
        for (var word : sortedWords)
            System.out.println(word);
        return 0;
    }

    public int orderingReversal() {
        String[] digits = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        var reversedIDigits = Arrays.stream(digits).filter(d -> d.charAt(1) == 'i').
                collect(Collectors.collectingAndThen(Collectors.toList(),
                        list->{Collections.reverse(list);return list.stream();})).toArray();
        System.out.println("A backwards list of the digits with a second character of 'i':");
        for (var d : reversedIDigits)
            System.out.println(d);
        return 0;
    }

    public int takeSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var first3Numbers = Arrays.stream(numbers).limit(3).toArray();
        System.out.println("First 3 numbers:");
        for (var n : first3Numbers)
            System.out.println(n);
        return 0;
    }

    public int nestedTake() {
        List<Customer> customers = getCustomerList();
        var first3WAOrders = customers.stream().filter(c -> c.getRegion() == "WA").flatMap(
                        c -> c.getOrders().stream().map(o -> Triplet.with(c.getCustomerId(), o.getOrderId(), o.getOrderDate()))).
                limit(3).collect(Collectors.toList());
        System.out.println("First 3 orders in WA:");
        for (var order : first3WAOrders)
            System.out.println(order);
        return 0;
    }

    public int skipSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var allButFirst4Numbers = Arrays.stream(numbers).skip(4).toArray();
        System.out.println("All but first 4 numbers:");
        for (var n : allButFirst4Numbers)
            System.out.println(n);
        return 0;
    }

    public int nestedSkip() {
        List<Customer> customers = getCustomerList();
        var allButFirst2Orders = customers.stream().filter(c -> c.getRegion() == "WA").flatMap(
                        c -> c.getOrders().stream().map(o -> Triplet.with(c.getCustomerId(), o.getOrderId(), o.getOrderDate()))).
                skip(2).collect(Collectors.toList());
        System.out.println("All but first 2 orders in WA:");
        for (var order : allButFirst2Orders)
            System.out.println(order);
        return 1;
    }

    public int takeWhileSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var firstNumbersLessThan6 = Arrays.stream(numbers).takeWhile(n -> n < 6).toArray();
        System.out.println("First numbers less than 6:");
        for (var num : firstNumbersLessThan6)
            System.out.println(num);
        return 0;
    }

    public int indexedTakeWhile() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var firstSmallNumbers = IntStream.range(0, numbers.length).takeWhile(index -> numbers[index] > index)
                .map(i -> numbers[i]).toArray();
        System.out.println("First numbers not less than their position:");
        for (var n : firstSmallNumbers)
            System.out.println(n);
        return 0;
    }

    public int skipWhileSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var allButFirst3Numbers = Arrays.stream(numbers).dropWhile(n -> n % 3 != 0).toArray();
        System.out.println("All elements starting from first element divisible by 3:");
        for (var n : allButFirst3Numbers)
            System.out.println(n);
        return 0;
    }

    public int indexedSkipWhile() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var laterNumbers = IntStream.range(0, numbers.length).dropWhile(index -> numbers[index] >= index)
                .map(i -> numbers[i]).toArray();
        System.out.println("All elements starting from first element less than its position:");
        for (var n : laterNumbers)
            System.out.println(n);
        return 0;
    }

    public int selectSyntax() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var numsPlusOne = Arrays.stream(numbers).map(n -> n + 1).toArray();
        System.out.println("Numbers + 1:");
        for (var i : numsPlusOne)
            System.out.println(i);
        return 0;
    }

    public int selectProperty() {
        List<Product> products = getProductList();
        var productNames = products.stream().map(p -> p.getProductName()).toList();
        System.out.println("Product Names:");
        for (var productName : productNames)
            System.out.println(productName);
        return 0;
    }

    public int transformWithSelect() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        var textNums = Arrays.stream(numbers).mapToObj(n -> strings[n]).toArray();
        System.out.println("Number strings:");
        for (var s : textNums)
            System.out.println(s);
        return 0;
    }

    public int selectByCaseAnonymous() {
        String[] words = {"aPPLE", "BlUeBeRrY", "cHeRry"};
        var upperLowerWords = Arrays.stream(words).map(w ->
                new UpperLower() {
                    @Override
                    public String getLower() { return w.toLowerCase(); }
                    @Override
                    public String getUpper() { return w.toUpperCase(); }
                }).toArray();
        for (Object ul : upperLowerWords)
            System.out.println("Uppercase: " + ((UpperLower) ul).getUpper() + ", Lowercase: " + ((UpperLower) ul).getLower());
        return 0;
    }

    public int selectByCaseTuple() {
        String[] words = {"aPPLE", "BlUeBeRrY", "cHeRry"};
        var upperLowerWords = Arrays.stream(words).map(w ->
                Pair.with(w.toUpperCase(), w.toLowerCase())).toArray();
        for (var ul : upperLowerWords)
            System.out.println("Uppercase: " + ((Pair) ul).getValue0() + ", Lowercase: " + ((Pair) ul).getValue1());
        return 0;
    }

    public int selectAnonymousConstructions() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        var digitOddEvens = Arrays.stream(numbers).mapToObj(n ->
                new DigitEven() {
                    @Override
                    public String getDigit() { return strings[n]; }
                    @Override
                    public boolean isEven() { return n % 2 == 0; }
                }).toArray();
        for (var d : digitOddEvens)
            System.out.println("The digit " + ((DigitEven) d).getDigit() + " is " + (((DigitEven) d).isEven() ? "even" : "odd"));
        return 0;
    }

    public int selectTupleConstructions() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        String[] strings = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        var digitOddEvens = Arrays.stream(numbers).mapToObj(n ->
                Pair.with(strings[n], n % 2 == 0)).toArray();
        for (var d : digitOddEvens)
            System.out.println("The digit " + ((Pair) d).getValue0() + " is " + ((boolean) ((Pair) d).getValue1() ? "even" : "odd"));
        return 0;
    }

    public int selectPropertySubset() {
        List<Product> products = getProductList();
        var productInfos = products.stream().map(p ->
                        Triplet.with(p.getProductName(), p.getCategory(), p.getUnitPrice()))
                .collect(Collectors.toList());
        System.out.println("Product Info:");
        for (var productInfo : productInfos)
            System.out.println(
                    productInfo.getValue0() + " is in the category " + productInfo.getValue1() + " and costs " + productInfo.getValue2() + " per unit.");
        return 0;
    }

    public int selectWithIndex() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var numsInPlace = IntStream.range(0, numbers.length).mapToObj(index ->
                Pair.with(numbers[index], index)).toArray();
        System.out.println("Number: In-place?");
        for (var n : numsInPlace)
            System.out.println(((Pair) n).getValue0() + ": " + ((Pair) n).getValue1());
        return 0;
    }

    public int selectWithWhere() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        String[] digits = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        var lowNums = Arrays.stream(numbers).filter(n -> n < 5).mapToObj(n -> digits[n]).toArray();
        System.out.println("Numbers < 5:");
        for (var num : lowNums)
            System.out.println(num);
        return 0;
    }

    public int selectFromMultipleSequences() {
        int[] numbersA = {0, 2, 4, 5, 6, 8, 9};
        int[] numbersB = {1, 3, 5, 7, 8};
        var pairs = Arrays.stream(numbersA).boxed().flatMap(a -> Arrays.stream(numbersB).filter(b -> a < b)
                .mapToObj(b -> Pair.with(a, b))).toArray();
        System.out.println("Pairs where a < b:");
        for (var pair : pairs)
            System.out.println(((Pair) pair).getValue0() + " is less than " + ((Pair) pair).getValue1());
        return 0;
    }

    public int selectFromChildSequence() {
        List<Customer> customers = getCustomerList();
        var orders = customers.stream().flatMap(c -> c.getOrders().stream().filter(o -> o.getTotal() < 500.00).
                map(o -> Triplet.with(c.getCustomerId(), o.getOrderDate(), o.getTotal()))).collect(Collectors.toList());
        for (var order : orders)
            System.out.println("Customer: " + order.getValue0() + ", Order: " + order.getValue1() + ", Total value: " + order.getValue2());
        return 0;
    }

    public int selectManyWithWhere() {
        List<Customer> customers = getCustomerList();
        var orders = customers.stream().flatMap(c -> c.getOrders().stream().filter(o -> o.getOrderDate().isAfter(
                        LocalDate.of(1998, 1, 1))).
                map(o -> Triplet.with(c.getCustomerId(), o.getOrderDate(), o.getTotal()))).collect(Collectors.toList());
        for (var order : orders)
            System.out.println("Customer: " + order.getValue0() + ", Order: " + order.getValue1() + ", Total value: " + order.getValue2());
        return 0;
    }

    public int selectManyWhereAssignment() {
        List<Customer> customers = getCustomerList();
        var orders = customers.stream().flatMap(c -> c.getOrders().stream().filter(o -> o.getTotal() > 2000.00).
                map(o -> Triplet.with(c.getCustomerId(), o.getOrderDate(), o.getTotal()))).collect(Collectors.toList());
        for (var order : orders)
            System.out.println("Customer: " + order.getValue0() + ", Order: " + order.getValue1() + ", Total value: " + order.getValue2());
        return 0;
    }

    public int selectMultipleWhereClauses() {
        List<Customer> customers = getCustomerList();
        LocalDate cutoffDate = LocalDate.of(1997, 1, 1);
        var orders = customers.stream().filter(c -> c.getRegion() == "WA").
                flatMap(c -> c.getOrders().stream().filter(o -> o.getOrderDate().isAfter(cutoffDate)).
                        map(o -> Pair.with(c.getCustomerId(), o.getOrderDate()))).collect(Collectors.toList());
        for (var order : orders)
            System.out.println("Customer: " + order.getValue0() + ", Order: " + order.getValue1());
        return 0;
    }

    public int indexedSelectMany() {
        List<Customer> customers = getCustomerList();
        var customerOrders = IntStream.range(0, customers.size()).boxed().flatMap(
                        index -> customers.get(index).getOrders().stream().map(
                                o -> "Customer #" + (index + 1) + " has an order with OrderID " + o.getOrderId()))
                .collect(Collectors.toList());
        for (var order : customerOrders)
            System.out.println(order);
        return 0;
    }

    public int anyMatchingElements() {
        String[] words = {"believe", "relief", "receipt", "field"};
        boolean iAfterE = Arrays.stream(words).anyMatch(w -> w.contains("ei"));
        System.out.println("There is a word that contains in the list that contains 'ei': " + iAfterE);
        return 0;
    }

    public int groupedAnyMatchedElements() {
        List<Product> products = getProductList();
        var productGroups = products.stream().collect(Collectors.groupingBy(
                p -> p.getCategory())).entrySet().stream().filter(e -> e.getValue().stream()
                .anyMatch(p -> p.getUnitsInStock() == 0)).collect(Collectors.toMap(e->e.getKey(),e->e.getValue()));
        for (var group : productGroups.entrySet()) {
            System.out.println(group.getKey());
            for (var product : group.getValue())
                System.out.println("\t" + product);
        }
        return 0;
    }

    public int allMatchedElements() {
        int[] numbers = {1, 11, 3, 19, 41, 65, 19};
        boolean onlyOdd = Arrays.stream(numbers).allMatch(n -> n % 2 == 1);
        System.out.println("The list contains only odd numbers: " + onlyOdd);
        return 0;
    }

    public int groupedAllMatchedElements() {
        List<Product> products = getProductList();
        var productGroups = products.stream().collect(Collectors.groupingBy(
                p -> p.getCategory())).entrySet().stream().filter(e -> e.getValue().stream()
                .allMatch(p -> p.getUnitsInStock() > 0)).collect(Collectors.toMap(e->e.getKey(),e->e.getValue()));
        for (var group : productGroups.entrySet()) {
            System.out.println(group.getKey());
            for (var product : group.getValue())
                System.out.println("\t" + product);
        }
        return 0;
    }

    public int deferredExecution() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        AtomicInteger i = new AtomicInteger();
        var q = Arrays.stream(numbers).map(n -> i.incrementAndGet());
        q.forEach(v -> System.out.println("v = " + v + ", i = " + i));
        return 0;
    }

    public int eagerExecution() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        AtomicInteger i = new AtomicInteger();
        var q = Arrays.stream(numbers).map(n -> i.incrementAndGet()).toArray();
        for (var v : q)
            System.out.println("v = " + v + ", i = " + i);
        return 0;
    }

    public int reuseQueryDefinition() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var lowNumbers = Arrays.stream(numbers).filter(n -> n <= 3);
        var lowNumbers2 = Arrays.stream(numbers).filter(n -> n <= 3);
        System.out.println("First run numbers <= 3:");
        lowNumbers.forEach(n -> System.out.println(n));
        for (int i = 0; i < 10; i++)
            numbers[i] = -numbers[i];
        System.out.println("Second run numbers <= 3:");
        lowNumbers2.forEach(n -> System.out.println(n));
        return 0;
    }

    public int lowNumbers() {
        int[] numbers = {5, 4, 1, 3, 9, 8, 6, 7, 2, 0};
        var lowNums = Arrays.stream(numbers).filter(n -> n < 5).toArray();
        System.out.println("Numbers < 5:");
        for (var x : lowNums)
            System.out.println(x);
        return 0;
    }

    public int productsOutOfStock() {
        List<Product> products = getProductList();
        var soldOutProducts = products.stream().filter(p -> p.getUnitsInStock() == 0)
                .collect(Collectors.toList());
        System.out.println("Sold out products:");
        for (var product : soldOutProducts)
            System.out.println(product.getProductName() + " is sold out!");
        return 0;
    }

    public int expensiveProductsInStock() {
        List<Product> products = getProductList();
        var expensiveInStockProducts = products.stream().filter(
                p -> p.getUnitsInStock() > 0 && p.getUnitPrice() > 3.00).collect(Collectors.toList());
        System.out.println("In-stock products that cost more than 3.00:");
        for (var product : expensiveInStockProducts)
            System.out.println(product.getProductName() + " is in stock and costs more than 3.00.");
        return 0;
    }

    public int displayCustomerOrders() {
        List<Customer> customers = getCustomerList();
        var waCustomers = customers.stream().filter(c -> c.getRegion() == "WA").collect(Collectors.toList());
        System.out.println("Customers from Washington and their orders:");
        for (var customer : waCustomers) {
            System.out.println("Customer " + customer.getCustomerId() + ": " + customer.getCompanyName());
            for (var order : customer.getOrders())
                System.out.println("  Order " + order.getOrderId() + ": " + order.getOrderDate());
        }
        return 0;
    }

    public int indexedWhere() {
        String[] digits = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        var shortDigits = IntStream.range(0, digits.length).filter(
                index -> digits[index].length() < index).mapToObj(index -> digits[index]).toArray();
        System.out.println("Short digits:");
        for (var d : shortDigits)
            System.out.println("The word " + d + " is shorter than its value.");
        return 0;
    }

    public int equalSequence() {
        var wordsA = new String[]{"cherry", "apple", "blueberry"};
        var wordsB = new String[]{"cherry", "apple", "blueberry"};
        boolean match = Arrays.equals(wordsA, wordsB);
        System.out.println("The sequences match: "+match);
        return 0;
    }

    public int unequalSequence() {
        var wordsA = new String[]{"cherry", "apple", "blueberry"};
        var wordsB = new String[]{"apple", "blueberry", "cherry"};
        boolean match = Arrays.equals(wordsA,wordsB);
        System.out.println("The sequences match: "+match);
        return 0;
    }

    public int concatSeries() {
        int[] numbersA = {0, 2, 4, 5, 6, 8, 9};
        int[] numbersB = {1, 3, 5, 7, 8};
        var allNumbers = Stream.concat(Arrays.stream(numbersA).boxed(),
                Arrays.stream(numbersB).boxed()).toArray();
        System.out.println("All numbers from both arrays:");
        for(var n : allNumbers)
            System.out.println(n);
        return 0;
    }

    public int concatProjection() {
        List<Customer> customers = getCustomerList();
        List<Product> products = getProductList();
        var allNames = Stream.concat(customers.stream().map(c->c.getCompanyName()),
                products.stream().map(p->p.getProductName())).collect(Collectors.toList());
        System.out.println("Customer and product names:");
        for(var n : allNames)
            System.out.println(n);
        return 0;
    }

    public int dotProduct() {
        int[] vectorA = {0, 2, 4, 5, 6};
        int[] vectorB = {1, 3, 5, 7, 8};
        int dotProduct = IntStream.range(0,vectorA.length).map(index->
                vectorA[index]*vectorB[index]).sum();
        System.out.println("Dot product: "+dotProduct);
        return 0;
    }

    public int distinctSyntax() {
        int[] factorsOf300 = {2, 2, 3, 5, 5};
        var uniqueFactors = Arrays.stream(factorsOf300).distinct().toArray();
        System.out.println("Prime factors of 300:");
        for (var f : uniqueFactors)
            System.out.println(f);
        return 0;
    }

    public int distinctPropertyValues() {
        List<Product> products = getProductList();
        var categoryNames = products.stream().map(p -> p.getCategory())
                .distinct().collect(Collectors.toList());
        System.out.println("Category names:");
        for (var n : categoryNames)
            System.out.println(n);
        return 0;
    }

    public int unionSyntax() {
        int[] numbersA = {0, 2, 4, 5, 6, 8, 9};
        int[] numbersB = {1, 3, 5, 7, 8};
        var uniqueNumbers = IntStream.concat(Arrays.stream(numbersA),
                Arrays.stream(numbersB)).distinct().toArray();
        System.out.println("Unique numbers from both arrays:");
        for (var n : uniqueNumbers)
            System.out.println(n);
        return 0;
    }

    public int unionOfQueryResults() {
        List<Product> products = getProductList();
        List<Customer> customers = getCustomerList();
        var productFirstChars = products.stream().map(p -> p.getProductName().charAt(0));
        var customerFirstChars = customers.stream().map(c -> c.getCompanyName().charAt(0));
        var uniqueFirstChars = Stream.concat(productFirstChars, customerFirstChars)
                .distinct().collect(Collectors.toList());
        System.out.println("Unique first letters from Product names and Customer names:");
        for (var ch : uniqueFirstChars)
            System.out.println(ch);
        return 0;
    }

    public int intersectSynxtax() {
        int[] numbersA = {0, 2, 4, 5, 6, 8, 9};
        int[] numbersB = {1, 3, 5, 7, 8};
        var commonNumbers = Arrays.stream(numbersA).filter(a ->
                Arrays.stream(numbersB).anyMatch(b->b==a)).toArray();
        System.out.println("Common numbers shared by both arrays:");
        for (var n : commonNumbers)
            System.out.println(n);
        return 0;
    }

    public int intersectQueryResults() {
        List<Product> products = getProductList();
        List<Customer> customers = getCustomerList();
        var productFirstChars = products.stream().map(p -> p.getProductName().charAt(0));
        var customerFirstChars = customers.stream().map(c -> c.getCompanyName().charAt(0));
        var commonFirstChars = productFirstChars.filter(p -> customerFirstChars.anyMatch(c -> c == p))
                .collect(Collectors.toList());
        System.out.println("Common first letters from Product names and Customer names:");
        for (var ch : commonFirstChars)
            System.out.println(ch);
        return 0;
    }

    public int differenceOfSets() {
        int[] numbersA = {0, 2, 4, 5, 6, 8, 9};
        int[] numbersB = {1, 3, 5, 7, 8};
        var aOnlyNumbers = Arrays.stream(numbersA).filter(a ->
                Arrays.stream(numbersB).allMatch(b->b!=a)).toArray();
        System.out.println("Numbers in first array but not second array:");
        for(var n : aOnlyNumbers)
            System.out.println(n);
        return 0;
    }

    public int DifferenceOfQueries() {
        List<Product> products = getProductList();
        List<Customer> customers = getCustomerList();
        var productFirstChars = products.stream().map(p -> p.getProductName().charAt(0));
        var customerFirstChars = customers.stream().map(c -> c.getCompanyName().charAt(0));
        var productOnlyFirstChars = productFirstChars.filter(p -> customerFirstChars.allMatch(c -> c != p))
                .collect(Collectors.toList());
        System.out.println("First letters from Product names, but not from Customer names:");
        for(var n : productOnlyFirstChars)
            System.out.println(n);
        return 0;
    }